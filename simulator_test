#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 11 12:35:55 2018

@author: vkain
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 23 10:40:31 2018

@author: vkain
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr  9 10:56:58 2018

@author: vkain
"""

import pyjapc

import matplotlib.pyplot as plt

import pickle

import datetime

import numpy as np

import time

import sys


from scipy.optimize import minimize
from scipy import optimize


#bctValue


total_losses_evolution = []
total_loss=[]


fig=plt.figure()


x0 = np.array([-0.05,-0.1,0.5,0.45])
A0 = np.array([5.,4.,3.,1.])
b0 = [0.5,0.5,0.5,0.5]
xold=x0

offset = 10.
        
        
        #print("comp ",compareArray)
        
       
        
yold = offset
for i, value in enumerate(x0):
    if(x0[i]<-2. or x0[i]> 2.):
        y = 50.
    else:    
        yold=yold+A0[i]*(x0[i]-b0[i])*(x0[i]-b0[i])

def simulateObservable(x):
        
        if(np.allclose(x,xold,rtol=1e-2)):
            print("no change")
            x = xold
            return yold
        
        
    
    
        print("new setting: ", x)
        
        offset = 10.
        
        
        #print("comp ",compareArray)
        
        if(np.array_equal(x0[1:],x[1:])):
        
            y = offset
            for i, value in enumerate(x):
                if(x[i]<-2. or x[i]> 2.):
                    y = 50.
                else:    
                    y=y+A0[i]*(x[i]-b0[i])*(x[i]-b0[i])
        else:
             A0[1]=A0[1]
             A0[2]=A0[2]
             A0[3]=A0[3]
             
             #b0[1]=0.8
             #b0[2]=0.7
             #b0[3]=0.8
            
            
             y = offset
             for i, value in enumerate(x):
                if(x[i]<-2. or x[i]> 2.):
                    y = 50.
                else:    
                    y=y+A0[i]*(x[i]-b0[i])*(x[i]-b0[i])
        
            #y = 0.1*np.random()
            #print("rand: "+0.1*np.random())
        #xold=x
        return y

yold = simulateObservable(x0)

def func_obj(x):
    
    
    losses = simulateObservable(x)
    
    xold = x
    
    total_losses_evolution.append(losses)
    
    
    
    plt.plot(total_losses_evolution);
    
    plt.show()
    plt.pause(0.0001) 
    
    return losses





res = minimize(func_obj, x0, method='powell',options={'disp': True,'direc':np.array([[0.3,0,0,0],[0,0.3,0,0],[0,0,0.3,0],[0,0,0,0.3]]),'ftol':0.4,'xtol':0.2})

print(res)

